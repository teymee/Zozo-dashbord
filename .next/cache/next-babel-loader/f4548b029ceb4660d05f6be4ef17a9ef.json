{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Gigs\\\\Zozo\\\\admin template\\\\martfury-admin-react\\\\pages\\\\HOC\\\\authRoute.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// HOC/withAuth.jsx\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../store/API/Api\";\n\nconst authRoute = WrappedComponent => {\n  return props => {\n    const Router = useRouter();\n    const {\n      0: verified,\n      1: setVerified\n    } = useState(false);\n    useEffect(async () => {\n      const accessToken = API.TOKEN; // if no accessToken was found,then we redirect to \"/\" page.\n\n      if (!accessToken) {\n        Router.replace(\"/admin/login\");\n        console.log(accessToken);\n      } else {\n        // we call the api that verifies the token.\n        const whoami = async () => {\n          const url = API.BASE_URL + \"/whoami\";\n          console.log(API.TOKEN);\n          const config = {\n            headers: {\n              Authorization: \"Bearer \" + API.TOKEN\n            }\n          };\n          const data = await axios.get(url, config).then(res => {\n            return res.data;\n          }).catch(err => {\n            let data;\n\n            if (err) {\n              data = false;\n            }\n\n            return data;\n          });\n          return data;\n        };\n\n        const data = await whoami(API.BASE_URL); // if token was verified we set the state.\n\n        if (data.verified) {\n          setVerified(true);\n        } else {\n          // If the token was fraud we first remove it from localStorage and then redirect to \"/\"\n          localStorage.removeItem(\"accessToken\");\n          Router.replace(\"/admin/login\");\n        }\n      }\n    }, []);\n\n    if (verified) {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, _objectSpread({}, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this);\n    } else {\n      return null;\n    }\n  };\n};\n\nexport default authRoute;","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/pages/HOC/authRoute.jsx"],"names":["useRouter","useEffect","useState","axios","API","authRoute","WrappedComponent","props","Router","verified","setVerified","accessToken","TOKEN","replace","console","log","whoami","url","BASE_URL","config","headers","Authorization","data","get","then","res","catch","err","localStorage","removeItem"],"mappings":";;;;;;;;;AAAA;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,qBAApB;;AAEA,MAAMC,SAAS,GAAIC,gBAAD,IAAsB;AACvC,SAAQC,KAAD,IAAW;AACjB,UAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,UAAM;AAAA,SAACS,QAAD;AAAA,SAAWC;AAAX,QAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEAD,IAAAA,SAAS,CAAC,YAAY;AACrB,YAAMU,WAAW,GAAGP,GAAG,CAACQ,KAAxB,CADqB,CAGrB;;AACA,UAAI,CAACD,WAAL,EAAkB;AACjBH,QAAAA,MAAM,CAACK,OAAP,CAAe,cAAf;AACoBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACpB,OAHD,MAGO;AACN;AACA,cAAMK,MAAM,GAAG,YAAY;AAC1B,gBAAMC,GAAG,GAAGb,GAAG,CAACc,QAAJ,GAAe,SAA3B;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACQ,KAAhB;AACA,gBAAMO,MAAM,GAAG;AACdC,YAAAA,OAAO,EAAE;AACRC,cAAAA,aAAa,EAAE,YAAYjB,GAAG,CAACQ;AADvB;AADK,WAAf;AAKA,gBAAMU,IAAI,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUN,GAAV,EAAeE,MAAf,EAAuBK,IAAvB,CAA6BC,GAAD,IAAS;AACvD,mBAAOA,GAAG,CAACH,IAAX;AACA,WAFkB,EAEhBI,KAFgB,CAETC,GAAD,IAAO;AACe,gBAAIL,IAAJ;;AACA,gBAAGK,GAAH,EAAO;AACDL,cAAAA,IAAI,GAAG,KAAP;AACL;;AACD,mBAAOA,IAAP;AACL,WARP,CAAnB;AAUA,iBAAOA,IAAP;AACA,SAnBD;;AAoBA,cAAMA,IAAI,GAAG,MAAMN,MAAM,CAACZ,GAAG,CAACc,QAAL,CAAzB,CAtBM,CAuBN;;AACA,YAAII,IAAI,CAACb,QAAT,EAAmB;AAClBC,UAAAA,WAAW,CAAC,IAAD,CAAX;AACA,SAFD,MAEO;AACN;AACAkB,UAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACArB,UAAAA,MAAM,CAACK,OAAP,CAAe,cAAf;AACA;AACD;AACD,KAvCQ,EAuCN,EAvCM,CAAT;;AAyCA,QAAIJ,QAAJ,EAAc;AAEb,0BAAO,QAAC,gBAAD,oBAAsBF,KAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAHD,MAGO;AACN,aAAO,IAAP;AACA;AACD,GAnDD;AAoDA,CArDD;;AAuDA,eAAeF,SAAf","sourcesContent":["// HOC/withAuth.jsx\r\nimport { useRouter } from \"next/router\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\"\r\nimport { API } from \"../../store/API/Api\";\r\n\r\nconst authRoute = (WrappedComponent) => {\r\n\treturn (props) => {\r\n\t\tconst Router = useRouter();\r\n\t\tconst [verified, setVerified] = useState(false);\r\n\r\n\t\tuseEffect(async () => {\r\n\t\t\tconst accessToken = API.TOKEN;\r\n               \r\n\t\t\t// if no accessToken was found,then we redirect to \"/\" page.\r\n\t\t\tif (!accessToken) {\r\n\t\t\t\tRouter.replace(\"/admin/login\");\r\n                        console.log(accessToken)\r\n\t\t\t} else {\r\n\t\t\t\t// we call the api that verifies the token.\r\n\t\t\t\tconst whoami = async () => {\r\n\t\t\t\t\tconst url = API.BASE_URL + \"/whoami\";\r\n\t\t\t\t\tconsole.log(API.TOKEN);\r\n\t\t\t\t\tconst config = {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: \"Bearer \" + API.TOKEN,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst data = await axios.get(url, config).then((res) => {\r\n\t\t\t\t\t\treturn res.data;\r\n\t\t\t\t\t}).catch((err)=>{\r\n                                    let data\r\n                                    if(err){\r\n                                          data = false\r\n                                    }\r\n                                    return data\r\n                              })\r\n\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t};\r\n\t\t\t\tconst data = await whoami(API.BASE_URL);\r\n\t\t\t\t// if token was verified we set the state.\r\n\t\t\t\tif (data.verified) {\r\n\t\t\t\t\tsetVerified(true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If the token was fraud we first remove it from localStorage and then redirect to \"/\"\r\n\t\t\t\t\tlocalStorage.removeItem(\"accessToken\");\r\n\t\t\t\t\tRouter.replace(\"/admin/login\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, []);\r\n\r\n\t\tif (verified) {\r\n\r\n\t\t\treturn <WrappedComponent {...props} />;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport default authRoute;\r\n"]},"metadata":{},"sourceType":"module"}