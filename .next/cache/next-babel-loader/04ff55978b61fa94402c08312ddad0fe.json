{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Gigs\\\\Zozo\\\\admin template\\\\martfury-admin-react\\\\pages\\\\HOC\\\\authRoute.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// HOC/withAuth.jsx\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport verifyToken from \"services/verifyToken\";\nimport { API } from \"../../store/API/Api\";\n\nconst authRoute = WrappedComponent => {\n  return props => {\n    const Router = useRouter();\n    const {\n      0: verified,\n      1: setVerified\n    } = useState(false);\n    useEffect(async () => {\n      const accessToken = API.TOKEN; // if no accessToken was found,then we redirect to \"/\" page.\n\n      if (!accessToken) {\n        Router.replace(\"/admin/login\");\n      } else {\n        // we call the api that verifies the token.\n        const whoami = async () => {\n          const url = API.BASE_URL + \"/whoami\";\n          console.log(API.TOKEN);\n          const config = {\n            headers: {\n              Authorization: \"Bearer \" + API.TOKEN\n            }\n          };\n          const data = await axios.get(url, config).then(res => {\n            return res.data;\n          });\n          return data;\n        };\n\n        const data = await whoami(API.BASE_URL); // if token was verified we set the state.\n\n        if (data.verified) {\n          setVerified(data.account);\n        } else {\n          // If the token was fraud we first remove it from localStorage and then redirect to \"/\"\n          localStorage.removeItem(\"accessToken\");\n          Router.replace(\"/admin/login\");\n        }\n      }\n    }, []);\n\n    if (verified) {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, _objectSpread({}, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  };\n};\n\nexport default authRoute;","map":{"version":3,"sources":["C:/Users/HP/Downloads/Gigs/Zozo/admin template/martfury-admin-react/pages/HOC/authRoute.jsx"],"names":["useRouter","useEffect","useState","verifyToken","API","authRoute","WrappedComponent","props","Router","verified","setVerified","accessToken","TOKEN","replace","whoami","url","BASE_URL","console","log","config","headers","Authorization","data","axios","get","then","res","account","localStorage","removeItem"],"mappings":";;;;;;;;;AAAA;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,GAAT,QAAoB,qBAApB;;AAEA,MAAMC,SAAS,GAAIC,gBAAD,IAAsB;AACtC,SAAQC,KAAD,IAAW;AAChB,UAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,UAAM;AAAA,SAACS,QAAD;AAAA,SAAWC;AAAX,QAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEAD,IAAAA,SAAS,CAAC,YAAY;AACpB,YAAMU,WAAW,GAAGP,GAAG,CAACQ,KAAxB,CADoB,CAEpB;;AACA,UAAI,CAACD,WAAL,EAAkB;AAChBH,QAAAA,MAAM,CAACK,OAAP,CAAe,cAAf;AACD,OAFD,MAEO;AACL;AACA,cAAMC,MAAM,GAAG,YAAY;AACvB,gBAAMC,GAAG,GAAGX,GAAG,CAACY,QAAJ,GAAa,SAAzB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYd,GAAG,CAACQ,KAAhB;AACA,gBAAMO,MAAM,GAAG;AACTC,YAAAA,OAAO,EAAE;AACHC,cAAAA,aAAa,EAAE,YAAYjB,GAAG,CAACQ;AAD5B;AADA,WAAf;AAKA,gBAAMU,IAAI,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUT,GAAV,EAAeI,MAAf,EAAuBM,IAAvB,CAA6BC,GAAD,IAAS;AAClD,mBAAOA,GAAG,CAACJ,IAAX;AACL,WAFkB,CAAnB;AAIA,iBAAOA,IAAP;AACL,SAbC;;AAcA,cAAMA,IAAI,GAAG,MAAMR,MAAM,CAACV,GAAG,CAACY,QAAL,CAAzB,CAhBK,CAiBL;;AACA,YAAIM,IAAI,CAACb,QAAT,EAAmB;AACjBC,UAAAA,WAAW,CAACY,IAAI,CAACK,OAAN,CAAX;AACD,SAFD,MAEO;AACL;AACAC,UAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACArB,UAAAA,MAAM,CAACK,OAAP,CAAe,cAAf;AACD;AACF;AACF,KA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,QAAIJ,QAAJ,EAAc;AACZ,0BAAO,QAAC,gBAAD,oBAAsBF,KAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GA1CD;AA2CD,CA5CD;;AA8CA,eAAeF,SAAf","sourcesContent":["// HOC/withAuth.jsx\r\nimport { useRouter } from \"next/router\";\r\nimport { useEffect, useState } from \"react\";\r\nimport verifyToken from \"services/verifyToken\";\r\nimport { API } from \"../../store/API/Api\";\r\n\r\nconst authRoute = (WrappedComponent) => {\r\n  return (props) => {\r\n    const Router = useRouter();\r\n    const [verified, setVerified] = useState(false);\r\n\r\n    useEffect(async () => {\r\n      const accessToken = API.TOKEN;\r\n      // if no accessToken was found,then we redirect to \"/\" page.\r\n      if (!accessToken) {\r\n        Router.replace(\"/admin/login\");\r\n      } else {\r\n        // we call the api that verifies the token.\r\n        const whoami = async () => {\r\n            const url = API.BASE_URL+\"/whoami\";\r\n            console.log(API.TOKEN)\r\n            const config = {\r\n                  headers: {\r\n                        Authorization: \"Bearer \" + API.TOKEN,\r\n                  },\r\n            };\r\n            const data = await axios.get(url, config).then((res) => {\r\n                  return res.data;\r\n            });\r\n      \r\n            return data;\r\n      };\r\n        const data = await whoami(API.BASE_URL);\r\n        // if token was verified we set the state.\r\n        if (data.verified) {\r\n          setVerified(data.account);\r\n        } else {\r\n          // If the token was fraud we first remove it from localStorage and then redirect to \"/\"\r\n          localStorage.removeItem(\"accessToken\");\r\n          Router.replace(\"/admin/login\");\r\n        }\r\n      }\r\n    }, []);\r\n    \r\n    if (verified) {\r\n      return <WrappedComponent {...props} />;\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n};\r\n\r\nexport default authRoute;"]},"metadata":{},"sourceType":"module"}